void sdRoundedBox( float2 p, float2 b, float4 r , out float RoundBox )
{
	r.xy = (p.x>0.0)?r.xy : r.zw;
	r.x  = (p.y>0.0)?r.x  : r.y;
	float2 q = abs(p)-b+r.x;
	RoundBox= min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;
}

void sdBox( float2 p, float2 b,out float sdBox )
{
	float2 d = abs(p)-b;
	sdBox= length(max(d,0.0)) + min(max(d.x,d.y),0.0);
}


void sdOrientedBox(  float2 p,  float2 a,  float2 b, float th, out float SDF )
{
	float l = length(b-a);
	float2  d = (b-a)/l;
	float2  q = (p-(a+b)*0.5);
	q = mul(float2x2(d.x,-d.y,d.y,d.x),q);
	q = abs(q)-float2(l,th)*0.5;
	SDF= length(max(q,0.0)) + min(max(q.x,q.y),0.0);    
}

void sdSegment(  float2 p,  float2 a,  float2 b , out float SDF )
{
	float2 pa = p-a, ba = b-a;
	float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
	SDF= length( pa - ba*h );
}

// float ndot(float2 a, float2 b ) { return a.x*b.x - a.y*b.y; }
void sdRhombus(  float2 p,  float2 b , out float SDF ) 
{
	p = abs(p);
	float2 temp=b-2.0*p;
	float Cross=temp.x*b.x-temp.y*b.y;
	float h = clamp(Cross/dot(b,b), -1.0, 1.0 );
	float d = length( p-0.5*b*float2(1.0-h,1.0+h) );
	SDF= d * sign( p.x*b.y + p.y*b.x - b.x*b.y );
}


void sdTrapezoid(  float2 p,  float r1, float r2, float he , out float SDF )
{
	float2 k1 = float2(r2,he);
	float2 k2 = float2(r2-r1,2.0*he);
	p.x = abs(p.x);
	float2 ca = float2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);
	float2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot(k2,k2), 0.0, 1.0 );
	float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;
	SDF= s*sqrt( min(dot(ca,ca),dot(cb,cb)) );
}

void sdParallelogram(  float2 p, float wi, float he, float sk, out float SDF  )
{
	float2 e = float2(sk,he);
	p = (p.y<0.0)?-p:p;
	float2  w = p - e; w.x -= clamp(w.x,-wi,wi);
	float2  d = float2(dot(w,w), -w.y);
	float s = p.x*e.y - p.y*e.x;
	p = (s<0.0)?-p:p;
	float2  v = p - float2(wi,0); v -= e*clamp(dot(v,e)/dot(e,e),-1.0,1.0);
	d = min( d, float2(dot(v,v), wi*he-abs(s)));
	SDF= sqrt(d.x)*sign(-d.y);
}

void sdEquilateralTriangle(  float2 p , out float SDF )
{
	const float k = sqrt(3.0);
	p.x = abs(p.x) - 1.0;
	p.y = p.y + 1.0/k;
	if( p.x+k*p.y>0.0 ) p = float2(p.x-k*p.y,-k*p.x-p.y)/2.0;
	p.x -= clamp( p.x, -2.0, 0.0 );
	SDF= -length(p)*sign(p.y);
}

void sdTriangleIsosceles(  float2 p,  float2 q , out float SDF )
{
	p.x = abs(p.x);
	float2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );
	float2 b = p - q*float2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );
	float s = -sign( q.y );
	float2 d = min( float2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),
				  float2( dot(b,b), s*(p.y-q.y)  ));
	SDF= -sqrt(d.x)*sign(d.y);
}


void sdTriangle(  float2 p,  float2 p0,  float2 p1,  float2 p2, out float SDF  )
{
	float2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;
	float2 v0 = p -p0, v1 = p -p1, v2 = p -p2;
	float2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );
	float2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );
	float2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );
	float s = sign( e0.x*e2.y - e0.y*e2.x );
	float2 d = min(min(float2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),
					 float2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),
					 float2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));
	SDF= -sqrt(d.x)*sign(d.y);
}


void sdUnevenCapsule( float2 p, float r1, float r2, float h, out float SDF  )
{
	p.x = abs(p.x);
	float b = (r1-r2)/h;
	float a = sqrt(1.0-b*b);
	float k = dot(p,float2(-b,a));
	if( k < 0.0 ){SDF= length(p) - r1;return ;}  ;
	if( k > a*h ) {SDF= length(p-float2(0.0,h)) - r2;return ;} ;
	SDF= dot(p, float2(a,b) ) - r1;
}


void sdPentagon(  float2 p,  float r , out float SDF )
{
	const float3 k = float3(0.809016994,0.587785252,0.726542528);
	p.x = abs(p.x);
	p -= 2.0*min(dot(float2(-k.x,k.y),p),0.0)*float2(-k.x,k.y);
	p -= 2.0*min(dot(float2( k.x,k.y),p),0.0)*float2( k.x,k.y);
	p -= float2(clamp(p.x,-r*k.z,r*k.z),r);    
	SDF= length(p)*sign(p.y);
}


void sdHexagon(  float2 p,  float r , out float SDF )
{
	const float3 k = float3(-0.866025404,0.5,0.577350269);
	p = abs(p);
	p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;
	p -= float2(clamp(p.x, -k.z*r, k.z*r), r);
	SDF= length(p)*sign(p.y);
}


void sdOctogon(  float2 p,  float r , out float SDF )
{
	const float3 k = float3(-0.9238795325, 0.3826834323, 0.4142135623 );
	p = abs(p);
	p -= 2.0*min(dot(float2( k.x,k.y),p),0.0)*float2( k.x,k.y);
	p -= 2.0*min(dot(float2(-k.x,k.y),p),0.0)*float2(-k.x,k.y);
	p -= float2(clamp(p.x, -k.z*r, k.z*r), r);
	SDF= length(p)*sign(p.y);
}


void sdHexagram(  float2 p,  float r , out float SDF )
{
	const float4 k = float4(-0.5,0.8660254038,0.5773502692,1.7320508076);
	p = abs(p);
	p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;
	p -= 2.0*min(dot(k.yx,p),0.0)*k.yx;
	p -= float2(clamp(p.x,r*k.z,r*k.w),r);
	SDF= length(p)*sign(p.y);
}


void sdStar5( float2 p,  float r,  float rf, out float SDF )
{
	const float2 k1 = float2(0.809016994375, -0.587785252292);
	const float2 k2 = float2(-k1.x,k1.y);
	p.x = abs(p.x);
	p -= 2.0*max(dot(k1,p),0.0)*k1;
	p -= 2.0*max(dot(k2,p),0.0)*k2;
	p.x = abs(p.x);
	p.y -= r;
	float2 ba = rf*float2(-k1.y,k1.x) - float2(0,1);
	float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );
	SDF= length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);
}


void sdStar( float2 p,  float r,  int n,  float m, out float SDF)
{
	// next 4 les can be precomputed for a given shape
	float an = 3.141593/float(n);
	float en = 3.141593/m;  // m is between 2 and n
	float2  acs = float2(cos(an),sin(an));
	float2  ecs = float2(cos(en),sin(en)); // ecs=float2(0,1) for regular polygon

	float bn = atan2(p.x,p.y) - 2.0*an* floor(atan2(p.x,p.y)/(2.0*an))- an;
	p = length(p)*float2(cos(bn),abs(sin(bn)));
	p -= r*acs;
	p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);
	SDF= length(p)*sign(p.x);
}

void sdPie(  float2 p,  float2 c,  float r , out float SDF)
{
	p.x = abs(p.x);
	float l = length(p) - r;
	float m = length(p-c*clamp(dot(p,c),0.0,r)); // c=s/cos of aperture
	SDF= max(l,m*sign(c.y*p.x-c.x*p.y));
}


void sdCutDisk(  float2 p,  float r,  float h, out float SDF)
{
	float w = sqrt(r*r-h*h); // constant for any given shape
	p.x = abs(p.x);
	float s = max( (h-r)*p.x*p.x+w*w*(h+r-2.0*p.y), h*p.x-w*p.y );
	SDF= (s<0.0) ? length(p)-r :
		   (p.x<w) ? h - p.y     :
					 length(p-float2(w,h));
}


void sdArc(  float2 p,  float2 sc,  float ra, float rb , out float SDF)
{
	// sc is the s/cos of the arc's aperture
	p.x = abs(p.x);
	SDF= ((sc.y*p.x>sc.x*p.y) ? length(p-sc*ra) : 
								  abs(length(p)-ra)) - rb;
}


void sdHorseshoe( float2 p, float2 c, float r,  float2 w , out float SDF)
{
	p.x = abs(p.x);
	float l = length(p);
	p = mul(float2x2(-c.x, c.y, c.y, c.x),p);
	p = float2((p.y>0.0 || p.x>0.0)?p.x:l*sign(-c.x),
			 (p.x>0.0)?p.y:l );
	p = float2(p.x,abs(p.y-r))-w;
		SDF=  length(max(p,0.0)) + min(0.0,max(p.x,p.y));
}


void sdVesica(float2 p, float r, float d, out float SDF)
{
	p = abs(p);
	float b = sqrt(r*r-d*d);
		SDF=  ((p.y-b)*d>p.x*b) ? length(p-float2(0.0,b))
							 : length(p-float2(-d,0.0))-r;
}


void sdMoon(float2 p, float d, float ra, float rb, out float SDF )
{
	p.y = abs(p.y);
	float a = (ra*ra - rb*rb + d*d)/(2.0*d);
	float b = sqrt(max(ra*ra-a*a,0.0));
	if( d*(p.x*b-p.y*a) > d*d*max(b-p.y,0.0) )
	{
		SDF= length(p-float2(a,b));
		return;
	}
	SDF= max( (length(p          )-ra),
			   -(length(p-float2(d,0))-rb));
}

void sdRoundedCross(  float2 p,  float h , out float SDF)
{
	float k = 0.5*(h+1.0/h); // k should be const at modelg time
	p = abs(p);
	SDF= ( p.x<1.0 && p.y<p.x*(k-h)+h ) ? 
			 k-sqrt(dot(p-float2(1,k),p-float2(1,k)))  :
		   sqrt(min(dot(p-float2(0,h),p-float2(0,h)),
					dot(p-float2(1,0),p-float2(1,0))));
}


void sdEgg(  float2 p,  float ra,  float rb, out float SDF )
{
	const float k = sqrt(3.0);
	p.x = abs(p.x);
	float r = ra - rb;
	SDF= ((p.y<0.0)       ? length(float2(p.x,  p.y    )) - r :
			(k*(p.x+r)<p.y) ? length(float2(p.x,  p.y-k*r)) :
							  length(float2(p.x+r,p.y    )) - 2.0*r) - rb;
}


void sdHeart(  float2 p , out float SDF)
{
	p.x = abs(p.x);

	if( p.y+p.x>1.0 )
	{
		SDF=sqrt(dot(p-float2(0.25,0.75),p-float2(0.25,0.75))) - sqrt(2.0)/4.0;
		return;
	}
	SDF= sqrt(min(dot(p-float2(0.00,1.00),p-float2(0.00,1.00)),
					dot(p-0.5*max(p.x+p.y,0.0),p-0.5*max(p.x+p.y,0.0)))) * sign(p.x-p.y);
}


void sdCross(  float2 p,  float2 b, float r , out float SDF) 
{
	p = abs(p); p = (p.y>p.x) ? p.yx : p.xy;
	float2  q = p - b;
	float k = max(q.y,q.x);
	float2  w = (k>0.0) ? q : float2(b.y-p.x,-k);
	SDF= sign(k)*length(max(w,0.0)) + r;
}


void sdRoundedX(  float2 p,  float w,  float r , out float SDF)
{
	p = abs(p);
	SDF= length(p-min(p.x+p.y,w)*0.5) - r;
}


void sdPolygon(  float2 v[5],  float2 p , out float SDF)
{
	// float d = dot(p-v[0],p-v[0]);
	// float s = 1.0;
	// for( int i=0, j=5-1; i<5; j=i, i++ )
	// {
	// 	float2 e = v[j] - v[i];
	// 	float2 w =    p - v[i];
	// 	float2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );
	// 	d = min( d, dot(b,b) );
	// 	float3 c = float3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);
	// 	if( all(c) || all(not(c)) ) s*=-1.0;  
	// }
	// SDF= s*sqrt(d);
}


void sdEllipse(  float2 p,  float2 ab , out float SDF)
{
	p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}
	float l = ab.y*ab.y - ab.x*ab.x;
	float m = ab.x*p.x/l;      float m2 = m*m; 
	float n = ab.y*p.y/l;      float n2 = n*n; 
	float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;
	float q = c3 + m2*n2*2.0;
	float d = c3 + m2*n2;
	float g = m + m*n2;
	float co;
	if( d<0.0 )
	{
		float h = acos(q/c3)/3.0;
		float s = cos(h);
		float t = sin(h)*sqrt(3.0);
		float rx = sqrt( -c*(s + t + 2.0) + m2 );
		float ry = sqrt( -c*(s - t + 2.0) + m2 );
		co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;
	}
	else
	{
		float h = 2.0*m*n*sqrt( d );
		float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);
		float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);
		float rx = -s - u - c*4.0 + 2.0*m2;
		float ry = (s - u)*sqrt(3.0);
		float rm = sqrt( rx*rx + ry*ry );
		co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;
	}
	float2 r = ab * float2(co, sqrt(1.0-co*co));
	SDF= length(r-p) * sign(p.y-r.y);
}


void sdParabola(  float2 pos,  float k , out float SDF)
{
	pos.x = abs(pos.x);
	float ik = 1.0/k;
	float p = ik*(pos.y - 0.5*ik)/3.0;
	float q = 0.25*ik*ik*pos.x;
	float h = q*q - p*p*p;
	float r = sqrt(abs(h));
	float x = (h>0.0) ? 
		pow(q+r,1.0/3.0) - pow(abs(q-r),1.0/3.0)*sign(r-q) :
		2.0*cos(atan2(r,q)/3.0)*sqrt(p);
	SDF= length(pos-float2(x,k*x*x)) * sign(pos.x-x);
}


void sdParabola(  float2 pos,  float wi,  float he , out float SDF)
{
	pos.x = abs(pos.x);
	float ik = wi*wi/he;
	float p = ik*(he-pos.y-0.5*ik)/3.0;
	float q = pos.x*ik*ik*0.25;
	float h = q*q - p*p*p;
	float r = sqrt(abs(h));
	float x = (h>0.0) ? 
		pow(q+r,1.0/3.0) - pow(abs(q-r),1.0/3.0)*sign(r-q) :
		2.0*cos(atan(r/q)/3.0)*sqrt(p);
	x = min(x,wi);
	SDF= length(pos-float2(x,he-x*x/ik)) * 
		   sign(ik*(pos.y-he)+pos.x*pos.x);
}


void sdBezier(  float2 pos,  float2 A,  float2 B,  float2 C , out float SDF)
{    
	float2 a = B - A;
	float2 b = A - 2.0*B + C;
	float2 c = a * 2.0;
	float2 d = A - pos;
	float kk = 1.0/dot(b,b);
	float kx = kk * dot(a,b);
	float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;
	float kz = kk * dot(d,a);      
	float res = 0.0;
	float p = ky - kx*kx;
	float p3 = p*p*p;
	float q = kx*(2.0*kx*kx-3.0*ky) + kz;
	float h = q*q + 4.0*p3;
	if( h >= 0.0) 
	{ 
		h = sqrt(h);
		float2 x = (float2(h,-h)-q)/2.0;
		// float2 uv = sign(x)*pow(abs(x), float2(1.0/3.0));
		float2 uv =pow(abs(x), float2(1.0/3.0,1.0/3.0));
		float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );
		res = dot(d + (c + b*t)*t,d + (c + b*t)*t);
	}
	else
	{
		float z = sqrt(-p);
		float v = acos( q/(p*z*2.0) ) / 3.0;
		float m = cos(v);
		float n = sin(v)*1.732050808;
		float3  t = clamp(float3(m+m,-n-m,n-m)*z-kx,0.0,1.0);
		res = min( dot(d+(c+b*t.x)*t.x,d+(c+b*t.x)*t.x),
				   dot(d+(c+b*t.y)*t.y,d+(c+b*t.x)*t.x) );
		// the third root cannot be the closest
		// res = m(res,dot2(d+(c+b*t.z)*t.z));
	}
	SDF= sqrt( res );
}


void sdBlobbyCross(  float2 pos, float he , out float SDF)
{
	pos = abs(pos);
	pos = float2(abs(pos.x-pos.y),1.0-pos.x-pos.y)/sqrt(2.0);

	float p = (he-pos.y-0.25/he)/(6.0*he);
	float q = pos.x/(he*he*16.0);
	float h = q*q - p*p*p;
    
	float x;
	if( h>0.0 ) { float r = sqrt(h); x = pow(q+r,1.0/3.0)-pow(abs(q-r),1.0/3.0)*sign(r-q); }
	else        { float r = sqrt(p); x = 2.0*r*cos(acos(q/(p*r))/3.0); }
	x = min(x,sqrt(2.0)/2.0);
    
	float2 z = float2(x,he*(1.0-2.0*x*x)) - pos;
	SDF= length(z) * sign(z.y);
}



void sdTunnel(  float2 p,  float2 wh, out float SDF )
{
	p.x = abs(p.x); p.y = -p.y;
	float2 q = p - wh;

	float d1 = dot(float2(max(q.x,0.0),q.y),float2(max(q.x,0.0),q.y));
	q.x = (p.y>0.0) ? q.x : length(p)-wh.x;
	float d2 = dot(float2(q.x,max(q.y,0.0)),float2(q.x,max(q.y,0.0)));
	float d = sqrt( min(d1,d2) );
    
	SDF= (max(q.x,q.y)<0.0) ? -d : d;
}


void sdStairs(  float2 p,  float2 wh,  float n , out float SDF)
{

    // base
	float2 ba = wh*n;
	float d = min(dot(p-float2(clamp(p.x,0.0,ba.x),0.0),p-float2(clamp(p.x,0.0,ba.x),0.0)), 
				  dot(p-float2(ba.x,clamp(p.y,0.0,ba.y)),p-float2(ba.x,clamp(p.y,0.0,ba.y))) );
    float s = sign(max(-p.y,p.x-ba.x) );

    // steps repetition

    float dia = length(wh);
	p = mul (float2x2(wh.x,-wh.y, wh.y,wh.x),p/dia);
    float id = clamp(round(p.x/dia),0.0,n-1.0);
    p.x = p.x - id*dia;
	p = mul (float2x2(wh.x, wh.y,-wh.y,wh.x),p/dia);


    // single step
    float hh = wh.y/2.0;
    p.y -= hh;
    
    if( p.y>hh*sign(p.x) ) s=1.0;
    p = (id<0.5 || p.x>0.0) ? p : -p;

	d = min( d, dot(p-float2(0.0,clamp(p.y,-hh,hh)),p-float2(0.0,clamp(p.y,-hh,hh))) );
	d = min( d, dot(p-float2(clamp(p.x,0.0,wh.x),hh),p-float2(clamp(p.x,0.0,wh.x),hh)) );

    
	SDF= sqrt(d)*s;
}